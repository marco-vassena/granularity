open import Lattice

module FG2CG.Graph.Memory {{ùë≥ : Lattice}} where

open import FG as FG
open import CG as CG
open import FG2CG.Syntax
open import Relation.Binary.PropositionalEquality

open import FG2CG.Graph.Types
open import FG2CG.Graph.Value

data Fg2Cg·¥π {‚Ñì} : FG.Memory ‚Ñì ‚Üí CG.Memory ‚Ñì ‚Üí Set where
  [] : Fg2Cg·¥π FG.[] CG.[]
  _‚à∑_ : ‚àÄ {œÑ œÑ' M‚ÇÅ M‚ÇÇ p} {r : FG.Raw œÑ} {v : CG.Value œÑ'}  ‚Üí Fg2Cg·¥ø p r v ‚Üí Fg2Cg·¥π M‚ÇÅ M‚ÇÇ ‚Üí Fg2Cg·¥π (r FG.‚à∑ M‚ÇÅ) (v CG.‚à∑ M‚ÇÇ)

mkFg2Cg·¥π : ‚àÄ {‚Ñì} (M : FG.Memory ‚Ñì) ‚Üí Fg2Cg·¥π M ‚ü™ M ‚ü´·¥π
mkFg2Cg·¥π FG.[] = []
mkFg2Cg·¥π (r FG.‚à∑ M) = mkFg2Cg·¥ø r ‚à∑ mkFg2Cg·¥π M

‚â°-Fg2Cg·¥π : ‚àÄ {‚Ñì} {M‚ÇÅ : FG.Memory ‚Ñì} {M‚ÇÇ : CG.Memory ‚Ñì} ‚Üí Fg2Cg·¥π M‚ÇÅ M‚ÇÇ ‚Üí M‚ÇÇ ‚â° ‚ü™ M‚ÇÅ ‚ü´·¥π
‚â°-Fg2Cg·¥π [] = refl
‚â°-Fg2Cg·¥π (_‚à∑_ {p = p} r M) with ‚â°-MkTy‚Ä≤ p
... | refl = cong‚ÇÇ CG._‚à∑_ (‚â°-Fg2Cg·¥ø r) (‚â°-Fg2Cg·¥π M)
